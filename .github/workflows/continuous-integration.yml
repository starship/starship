name: Continuous Integration
on: [push, pull_request]
jobs:
  # Run the `rustfmt` code formatter
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Run the `clippy` linting tool
  clippy:
    name: Clippy [Linter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@bucket-size
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D clippy::all

  # Run a security audit on dependencies
  cargo_audit:
    name: Cargo Audit [Security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo install --force cargo-audit
      - run: cargo generate-lockfile
      - uses: actions-rs/cargo@v1
        with:
          command: audit

  # Ensure that the project could be successfully compiled
  cargo_check:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all

  # Run tests on Linux, and macOS
  # On both Rust stable and Rust nightly
  test:
    name: Test Suite
    needs: [rustfmt, clippy, cargo_check, cargo_audit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
        rust: [stable, nightly]
    steps:
      # Checkout the branch being tested
      - uses: actions/checkout@v1

      # Install all the required dependencies for testing
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install Node.js at a fixed version
      - uses: actions/setup-node@master
        with:
          node-version: "12.0.0"

      # Install Golang at a fixed version
      - uses: actions/setup-go@master
        with:
          go-version: "1.12.1"

      # Install Ruby at a fixed version
      - uses: actions/setup-ruby@master
        with:
          ruby-version: "2.6.3"

      # Install Python at a fixed version
      - uses: actions/setup-python@master
        with:
          python-version: "3.6.9"

      # Install dotnet at a fixed version
      - uses: actions/setup-dotnet@master
        with:
          dotnet-version: "2.2.402"

      # Run the ignored tests that expect the above setup
      - name: Run all tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -- -Z unstable-options --include-ignored

  # Run the tests in the Docker image
  docker_test:
    name: Test in Docker
    needs: [rustfmt, clippy, cargo_check, cargo_audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Pull the pre-built Docker image
        run: docker pull starshipcommand/starship-test
      - name: Fix file permissions
        run: chmod -R a+w .
      - name: Build the Docker image
        run:
          docker build -f tests/Dockerfile --tag starshipcommand/starship-test --cache-from
          starshipcommand/starship-test .
      - name: Run tests in Docker
        run: docker run --rm -v $(pwd):/src/starship starshipcommand/starship-test

  # Publish all packages to Crates.io
  cargo_publish:
    name: Publish Cargo Packages
    needs: [test, docker_test]
    runs-on: ubuntu-latest
    # Only run if tag starts with "v*" (e.g. v1.0.0)
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo install --force cargo-publish-all
      - run: cargo-publish-all --token $CRATES_IO_TOKEN --yes
